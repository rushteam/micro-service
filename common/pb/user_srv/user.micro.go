// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user_srv/user.proto

/*
Package user_srv is a generated protocol buffer package.

It is generated from these files:
	user_srv/user.proto

It has these top-level messages:
	LoginReq
	LoginRsp
	UserReq
	UserRsp
	Userinfo
	CreateReq
*/
package user_srv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRsp, error)
	User(ctx context.Context, in *UserReq, opts ...client.CallOption) (*UserRsp, error)
	Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*UserRsp, error)
	Bind(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*UserRsp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user_srv"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRsp, error) {
	req := c.c.NewRequest(c.name, "UserService.Login", in)
	out := new(LoginRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) User(ctx context.Context, in *UserReq, opts ...client.CallOption) (*UserRsp, error) {
	req := c.c.NewRequest(c.name, "UserService.User", in)
	out := new(UserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*UserRsp, error) {
	req := c.c.NewRequest(c.name, "UserService.Create", in)
	out := new(UserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Bind(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*UserRsp, error) {
	req := c.c.NewRequest(c.name, "UserService.Bind", in)
	out := new(UserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Login(context.Context, *LoginReq, *LoginRsp) error
	User(context.Context, *UserReq, *UserRsp) error
	Create(context.Context, *CreateReq, *UserRsp) error
	Bind(context.Context, *CreateReq, *UserRsp) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Login(ctx context.Context, in *LoginReq, out *LoginRsp) error
		User(ctx context.Context, in *UserReq, out *UserRsp) error
		Create(ctx context.Context, in *CreateReq, out *UserRsp) error
		Bind(ctx context.Context, in *CreateReq, out *UserRsp) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Login(ctx context.Context, in *LoginReq, out *LoginRsp) error {
	return h.UserServiceHandler.Login(ctx, in, out)
}

func (h *userServiceHandler) User(ctx context.Context, in *UserReq, out *UserRsp) error {
	return h.UserServiceHandler.User(ctx, in, out)
}

func (h *userServiceHandler) Create(ctx context.Context, in *CreateReq, out *UserRsp) error {
	return h.UserServiceHandler.Create(ctx, in, out)
}

func (h *userServiceHandler) Bind(ctx context.Context, in *CreateReq, out *UserRsp) error {
	return h.UserServiceHandler.Bind(ctx, in, out)
}
