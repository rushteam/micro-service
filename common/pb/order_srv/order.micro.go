// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: order_srv/order.proto

/*
Package order_srv is a generated protocol buffer package.

It is generated from these files:
	order_srv/order.proto

It has these top-level messages:
	Address
	Items
	Order
	CreateReq
	OrderRsp
	QueryReq
	QueryListReq
*/
package order_srv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderService service

type OrderService interface {
	// 预算订单
	Budget(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*OrderRsp, error)
	// 创建订单
	Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*OrderRsp, error)
	// 订单详情
	Order(ctx context.Context, in *QueryReq, opts ...client.CallOption) (*OrderRsp, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "order_srv"
	}
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) Budget(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*OrderRsp, error) {
	req := c.c.NewRequest(c.name, "OrderService.Budget", in)
	out := new(OrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*OrderRsp, error) {
	req := c.c.NewRequest(c.name, "OrderService.Create", in)
	out := new(OrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Order(ctx context.Context, in *QueryReq, opts ...client.CallOption) (*OrderRsp, error) {
	req := c.c.NewRequest(c.name, "OrderService.Order", in)
	out := new(OrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	// 预算订单
	Budget(context.Context, *CreateReq, *OrderRsp) error
	// 创建订单
	Create(context.Context, *CreateReq, *OrderRsp) error
	// 订单详情
	Order(context.Context, *QueryReq, *OrderRsp) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) error {
	type orderService interface {
		Budget(ctx context.Context, in *CreateReq, out *OrderRsp) error
		Create(ctx context.Context, in *CreateReq, out *OrderRsp) error
		Order(ctx context.Context, in *QueryReq, out *OrderRsp) error
	}
	type OrderService struct {
		orderService
	}
	h := &orderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderService{h}, opts...))
}

type orderServiceHandler struct {
	OrderServiceHandler
}

func (h *orderServiceHandler) Budget(ctx context.Context, in *CreateReq, out *OrderRsp) error {
	return h.OrderServiceHandler.Budget(ctx, in, out)
}

func (h *orderServiceHandler) Create(ctx context.Context, in *CreateReq, out *OrderRsp) error {
	return h.OrderServiceHandler.Create(ctx, in, out)
}

func (h *orderServiceHandler) Order(ctx context.Context, in *QueryReq, out *OrderRsp) error {
	return h.OrderServiceHandler.Order(ctx, in, out)
}
